// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cremeCoffeeBurgett.Models;

namespace cremeCoffeeBurgett.Migrations
{
    [DbContext(typeof(CoffeeshopContext))]
    [Migration("20210420230701_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Bean", b =>
                {
                    b.Property<int>("BeanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("BeanId");

                    b.HasIndex("CountryId");

                    b.ToTable("Beans");

                    b.HasData(
                        new
                        {
                            BeanId = 1,
                            CountryId = "brazil",
                            Name = "Brazil",
                            Price = 18.0
                        },
                        new
                        {
                            BeanId = 2,
                            CountryId = "burundi",
                            Name = "Burundi",
                            Price = 19.5
                        },
                        new
                        {
                            BeanId = 3,
                            CountryId = "blend",
                            Name = "Cold Brew Blend",
                            Price = 16.5
                        },
                        new
                        {
                            BeanId = 4,
                            CountryId = "columbia",
                            Name = "Columbia",
                            Price = 17.5
                        },
                        new
                        {
                            BeanId = 5,
                            CountryId = "costa rica",
                            Name = "Costa Rica",
                            Price = 17.989999999999998
                        },
                        new
                        {
                            BeanId = 6,
                            CountryId = "blend",
                            Name = "Crimson Tide Blend",
                            Price = 16.5
                        },
                        new
                        {
                            BeanId = 7,
                            CountryId = "blend",
                            Name = "Daylight Blend",
                            Price = 18.25
                        },
                        new
                        {
                            BeanId = 8,
                            CountryId = "columbia",
                            Name = "Decaf Columbia",
                            Price = 17.5
                        },
                        new
                        {
                            BeanId = 9,
                            CountryId = "costa rica",
                            Name = "Decaf Cost Rica",
                            Price = 17.989999999999998
                        },
                        new
                        {
                            BeanId = 10,
                            CountryId = "blend",
                            Name = "Decaf Daylight Blend",
                            Price = 18.25
                        },
                        new
                        {
                            BeanId = 11,
                            CountryId = "ethiopa",
                            Name = "Ethiopa",
                            Price = 19.75
                        },
                        new
                        {
                            BeanId = 12,
                            CountryId = "blend",
                            Name = "French Roast",
                            Price = 17.0
                        },
                        new
                        {
                            BeanId = 13,
                            CountryId = "guatemala",
                            Name = "Guatemala",
                            Price = 18.5
                        },
                        new
                        {
                            BeanId = 14,
                            CountryId = "usa",
                            Name = "Hawaii Kona",
                            Price = 35.25
                        },
                        new
                        {
                            BeanId = 15,
                            CountryId = "honduras",
                            Name = "Honduras",
                            Price = 18.5
                        },
                        new
                        {
                            BeanId = 16,
                            CountryId = "blend",
                            Name = "Italian Roast",
                            Price = 16.5
                        },
                        new
                        {
                            BeanId = 17,
                            CountryId = "kenya",
                            Name = "Kenya",
                            Price = 19.75
                        },
                        new
                        {
                            BeanId = 18,
                            CountryId = "mexico",
                            Name = "Mexico",
                            Price = 18.5
                        },
                        new
                        {
                            BeanId = 19,
                            CountryId = "mexico",
                            Name = "Mexico Chiapas",
                            Price = 19.989999999999998
                        },
                        new
                        {
                            BeanId = 20,
                            CountryId = "papua new guinea",
                            Name = "Papua New Guinea",
                            Price = 19.75
                        },
                        new
                        {
                            BeanId = 21,
                            CountryId = "peru",
                            Name = "Peru",
                            Price = 18.5
                        },
                        new
                        {
                            BeanId = 22,
                            CountryId = "blend",
                            Name = "Rise and Shine Blend",
                            Price = 16.5
                        },
                        new
                        {
                            BeanId = 23,
                            CountryId = "rwanda",
                            Name = "Rwanda",
                            Price = 19.989999999999998
                        },
                        new
                        {
                            BeanId = 24,
                            CountryId = "blend",
                            Name = "Sunshine Blend",
                            Price = 16.75
                        },
                        new
                        {
                            BeanId = 25,
                            CountryId = "indonesia",
                            Name = "Sulawesi",
                            Price = 19.5
                        },
                        new
                        {
                            BeanId = 26,
                            CountryId = "indonesia",
                            Name = "Sumatra",
                            Price = 19.0
                        },
                        new
                        {
                            BeanId = 27,
                            CountryId = "tanzania",
                            Name = "Tanzania",
                            Price = 21.0
                        },
                        new
                        {
                            BeanId = 28,
                            CountryId = "blend",
                            Name = "Traders Blend",
                            Price = 16.75
                        },
                        new
                        {
                            BeanId = 29,
                            CountryId = "blend",
                            Name = "Whiskey Barrel Aged Blend",
                            Price = 26.75
                        });
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.CoffeeOrigin", b =>
                {
                    b.Property<int>("BeanId")
                        .HasColumnType("int");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.HasKey("BeanId", "OriginId");

                    b.HasIndex("OriginId");

                    b.ToTable("BeanOrigins");

                    b.HasData(
                        new
                        {
                            BeanId = 1,
                            OriginId = 1
                        },
                        new
                        {
                            BeanId = 2,
                            OriginId = 4
                        },
                        new
                        {
                            BeanId = 3,
                            OriginId = 5
                        },
                        new
                        {
                            BeanId = 4,
                            OriginId = 7
                        },
                        new
                        {
                            BeanId = 5,
                            OriginId = 9
                        },
                        new
                        {
                            BeanId = 6,
                            OriginId = 6
                        },
                        new
                        {
                            BeanId = 7,
                            OriginId = 5
                        },
                        new
                        {
                            BeanId = 8,
                            OriginId = 7
                        },
                        new
                        {
                            BeanId = 9,
                            OriginId = 9
                        },
                        new
                        {
                            BeanId = 10,
                            OriginId = 6
                        },
                        new
                        {
                            BeanId = 11,
                            OriginId = 10
                        },
                        new
                        {
                            BeanId = 12,
                            OriginId = 5
                        },
                        new
                        {
                            BeanId = 13,
                            OriginId = 13
                        },
                        new
                        {
                            BeanId = 14,
                            OriginId = 15
                        },
                        new
                        {
                            BeanId = 15,
                            OriginId = 16
                        },
                        new
                        {
                            BeanId = 16,
                            OriginId = 5
                        },
                        new
                        {
                            BeanId = 17,
                            OriginId = 17
                        },
                        new
                        {
                            BeanId = 18,
                            OriginId = 18
                        },
                        new
                        {
                            BeanId = 19,
                            OriginId = 18
                        },
                        new
                        {
                            BeanId = 20,
                            OriginId = 19
                        },
                        new
                        {
                            BeanId = 21,
                            OriginId = 20
                        },
                        new
                        {
                            BeanId = 22,
                            OriginId = 6
                        },
                        new
                        {
                            BeanId = 23,
                            OriginId = 21
                        },
                        new
                        {
                            BeanId = 24,
                            OriginId = 6
                        },
                        new
                        {
                            BeanId = 25,
                            OriginId = 25
                        },
                        new
                        {
                            BeanId = 26,
                            OriginId = 23
                        },
                        new
                        {
                            BeanId = 27,
                            OriginId = 26
                        },
                        new
                        {
                            BeanId = 28,
                            OriginId = 5
                        },
                        new
                        {
                            BeanId = 29,
                            OriginId = 6
                        });
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = "blend",
                            Name = "Blend"
                        },
                        new
                        {
                            CountryId = "brazil",
                            Name = "Brazil"
                        },
                        new
                        {
                            CountryId = "burundi",
                            Name = "Burundi"
                        },
                        new
                        {
                            CountryId = "columbia",
                            Name = "Columbia"
                        },
                        new
                        {
                            CountryId = "costa rica",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            CountryId = "ethiopa",
                            Name = "Ethiopa"
                        },
                        new
                        {
                            CountryId = "guatemala",
                            Name = "Guatemala"
                        },
                        new
                        {
                            CountryId = "usa",
                            Name = "USA"
                        },
                        new
                        {
                            CountryId = "honduras",
                            Name = "Honduras"
                        },
                        new
                        {
                            CountryId = "kenya",
                            Name = "Kenya"
                        },
                        new
                        {
                            CountryId = "mexico",
                            Name = "Mexico"
                        },
                        new
                        {
                            CountryId = "papua new guinea",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = "peru",
                            Name = "Peru"
                        },
                        new
                        {
                            CountryId = "rwanda",
                            Name = "Rwanda"
                        },
                        new
                        {
                            CountryId = "indonesia",
                            Name = "Indonesia"
                        },
                        new
                        {
                            CountryId = "tanzania",
                            Name = "Tanzania"
                        });
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Origin", b =>
                {
                    b.Property<int>("OriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("OriginId");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            OriginId = 1,
                            Name = "Brazil",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 2,
                            Name = "Brazil",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 3,
                            Name = "Burundi",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 4,
                            Name = "Burundi",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 5,
                            Name = "Blend",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 6,
                            Name = "Blend",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 7,
                            Name = "Columbia",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 8,
                            Name = "Columbia",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 9,
                            Name = "Costa Rica",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 10,
                            Name = "Ethiopia",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 11,
                            Name = "Ethiopia",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 12,
                            Name = "Ethiopia",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 13,
                            Name = "Guatemala",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 14,
                            Name = "Guatemala",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 15,
                            Name = "USA",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 16,
                            Name = "Honduras",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 17,
                            Name = "Kenya",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 18,
                            Name = "Mexico",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 19,
                            Name = "Papua New Guinea",
                            Process = "Natural"
                        },
                        new
                        {
                            OriginId = 20,
                            Name = "Peru",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 21,
                            Name = "Rwanda",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 22,
                            Name = "Rwanda",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 23,
                            Name = "Indonesia",
                            Process = "Washed"
                        },
                        new
                        {
                            OriginId = 25,
                            Name = "Indonesia",
                            Process = "Honey"
                        },
                        new
                        {
                            OriginId = 26,
                            Name = "Tanzania",
                            Process = "Natural"
                        });
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cremeCoffeeBurgett.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cremeCoffeeBurgett.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cremeCoffeeBurgett.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cremeCoffeeBurgett.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Bean", b =>
                {
                    b.HasOne("cremeCoffeeBurgett.Models.Country", "Country")
                        .WithMany("Beans")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.CoffeeOrigin", b =>
                {
                    b.HasOne("cremeCoffeeBurgett.Models.Bean", "Bean")
                        .WithMany("CoffeeOrigins")
                        .HasForeignKey("BeanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cremeCoffeeBurgett.Models.Origin", "Origin")
                        .WithMany("CoffeeOrigins")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bean");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Bean", b =>
                {
                    b.Navigation("CoffeeOrigins");
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Country", b =>
                {
                    b.Navigation("Beans");
                });

            modelBuilder.Entity("cremeCoffeeBurgett.Models.Origin", b =>
                {
                    b.Navigation("CoffeeOrigins");
                });
#pragma warning restore 612, 618
        }
    }
}
